# https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/github-actions.md
# https://stackoverflow.com/questions/74744498/github-pushing-to-protected-branches-with-fine-grained-token
# NOTE: requires a GitHub token with with admin rights to create protected tags
#
# Created a github app to allow this action to bypass branch protection rules for tags
# https://gonzalohirsch.com/blog/semantic-release-and-branch-protection-rules/
name: Release Workflow
run-name: ${{ github.actor }} is automatically releasing ðŸš€
on:
  push:
    branches:
      - main # or main
  workflow_dispatch: {}
permissions:
  contents: read # for checkout
jobs:
  release:
    name: Release Job
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout Step
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # get all history for git tags
      # we don't need node
      - name: Setup Node.js Step
        uses: actions/setup-node@v4
        with:
          node-version: "22.0.0"
      # - name: Install dependencies Step
      #   run: npm clean-install --ignore-scripts
      # - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies Step
      #   run: npm audit signatures
      - name: Release Step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release@23.1.1
  # check the github_publish.yml in inactive for comments
  # moved it here as github actions can't trigger another workflow
  publish-release:
    runs-on: ubuntu-latest
    name: Publish release Job
    needs: release # wait for the first job to finish
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # get all history for git tags
      - name: Set up JDK Step
        uses: actions/setup-java@v4
        with:
          java-version: "17.0.2"
          distribution: "temurin"
      - name: Setup Gradle Step
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.1.1
      - name: Publish artifact Step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # The GITHUB_REF tag comes in the format 'refs/tags/xxx'. In our project v0.1.0
        # If we split on '/' and take the 3rd value,
        # we can get the release name.
        # We can also remove the 'v' from the version
        # and append SNAPSHOT to the version
        run: |
          NEW_VERSION=$(echo "${GITHUB_REF}" | cut -d "/" -f3) # v0.1.0
          # NEW_VERSION=$(echo "${GITHUB_REF}" | cut -d "/" -f3 | cut -d "v" -f2)-SNAPSHOT # 0.1.0-SNAPSHOT
          # NEW_VERSION=$(echo "${GITHUB_REF}" | cut -d "/" -f3 | cut -d "v" -f2) # 0.1.0
          echo "New version: ${NEW_VERSION}"
          echo "Github username: ${GITHUB_ACTOR}"
          # overrides the version in the gradle.properties or build.gradle file
          # we don't write to the file because we don't want to commit the change
          # and cause conflicts on release
          ./gradlew -Pversion=${NEW_VERSION} publish
